# typed: false
# frozen_string_literal: true

# This file was generated by Homebrew Releaser. DO NOT EDIT.
class Makeheaders < Formula
  desc "Generate C/C++ header files from source files"
  homepage "https://github.com/bloodmagesoftware/makeheaders"
  version "0.0.0"
  license "FreeBSD License"

  # Define resources for different OS/Arch combinations
  on_macos do
    if Hardware::CPU.arm?
      # URL for macos-arm64 binary
      url "https://github.com/bloodmagesoftware/makeheaders/releases/download/v#{version}/makeheaders-macos-arm64"
      sha256 "02b08f67cc0aab1a6028b97fc45df0b40fa49b11a0f5c47a159f55b699f65fcb"
    # else
      # No binary available for Intel Macs based on the provided workflow
      # You could optionally raise an error or provide build instructions:
      #odie "makeheaders is currently only available for Apple Silicon Macs (arm64)."
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      # URL for linux-amd64 binary
      url "https://github.com/bloodmagesoftware/makeheaders/releases/download/v#{version}/makeheaders-linux-amd64"
      sha256 "a07a9d16223d4fab9d49b1145aa66232c28b12a267e9fbb5b14ad650b871d54e"
    # else
      # No binary available for ARM Linux based on the provided workflow
      # You could optionally raise an error or provide build instructions:
      #odie "makeheaders is currently only available for Intel/AMD Linux (amd64)."
    end
  end

  def install
    # Determine the correct binary name based on OS and architecture
    binary_name = if OS.mac? && Hardware::CPU.arm?
      "makeheaders-macos-arm64"
    elsif OS.linux? && Hardware::CPU.intel?
      "makeheaders-linux-amd64"
    else
      # If no pre-built binary matches, raise an error.
      # This part might be unreachable if the `on_macos`/`on_linux` blocks handle unavailability.
      odie "Unsupported architecture: #{OS.kernel_name}/#{Hardware::CPU.arch}"
    end

    # Check if the expected binary file exists after download
    unless File.exist?(binary_name)
        odie "The downloaded artifact (#{binary_name}) was not found. This might indicate an issue with the formula definition or the release assets."
    end

    # Move the downloaded binary to the bin directory and rename it to "makeheaders"
    bin.install binary_name => "makeheaders"

    # Ensure the binary is executable
    chmod 0755, bin/"makeheaders"
  end

  test do
    # Basic test: check if the command runs and exits successfully
    system "#{bin}/makeheaders", "--version" # Adjust if your tool uses a different flag for version or doesn't have one
    # More comprehensive test: create dummy files and run makeheaders?
    # (testpath/"test.c").write "// Test content\n"
    # system "#{bin}/makeheaders", testpath/"test.c"
    # assert_predicate testpath/"test.h", :exist? # Check if header was created
  end
end
